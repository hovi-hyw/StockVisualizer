# 开发环境专用的docker-compose配置
version: '3.8'

services:
  backend:
    build:
      context: ..
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DEBUG=True
      - LOG_LEVEL=DEBUG
      - PYTHONUNBUFFERED=1
    volumes:
      - ../backend:/app/backend  # 挂载本地后端代码到容器
      - ../.env:/app/.env  # 挂载环境变量文件
    networks:
      - stock_network
    restart: unless-stopped
    # 开发环境可以简化健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ..
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"  # 映射到React开发服务器端口
    volumes:
      - ../frontend:/app  # 挂载本地前端代码到容器
      - /app/node_modules  # 排除node_modules目录，使用容器内的依赖
    environment:
      - CHOKIDAR_USEPOLLING=true  # 在某些环境下需要启用轮询以检测文件变化
      - WDS_SOCKET_PORT=3000  # WebSocket端口设置
      - REACT_APP_API_URL=http://localhost:8001  # API地址更新为新的后端端口
    networks:
      - stock_network
    restart: unless-stopped
    # 开发环境可以简化健康检查
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

networks:
  stock_network:
    external: true